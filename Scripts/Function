CREATE OR REPLACE FUNCTION inserir_usuario(nm_nome VARCHAR, ds_email VARCHAR, ds_senha VARCHAR, ds_telefone VARCHAR)
RETURNS INT AS $$
DECLARE
	new_id INT;
BEGIN
    INSERT INTO usuarios (nm_nome, ds_email, ds_senha, ds_telefone)
    VALUES (nm_nome, ds_email, ds_senha, ds_telefone)
	RETURNING nr_id_usuario INTO new_id;
	RETURN new_id;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION validar_login(p_email VARCHAR)
RETURNS TABLE (
    nr_id_usuario INTEGER,
    ds_email VARCHAR,
    ds_senha VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT u.nr_id_usuario, u.ds_email, u.ds_senha
    FROM usuarios u
    WHERE u.ds_email = p_email;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION inserir_conta(
    p_id_usuario INTEGER,
    p_id_saldo INTEGER,
    p_tipo_conta VARCHAR,  -- Tipo conta recebido como VARCHAR
    p_nome_conta VARCHAR,
    p_saldo DOUBLE PRECISION,
    p_data_deposito TIMESTAMP
) RETURNS INTEGER AS $$
DECLARE
    v_id_conta INTEGER;
    v_tipo_conta_id INTEGER;  -- Variável para armazenar o ID do tipo de conta
BEGIN
    -- Buscar o ID do tipo de conta a partir do nome
    SELECT nr_id_tipo_conta INTO v_tipo_conta_id
    FROM tipo_conta
    WHERE nm_tipo_conta = p_tipo_conta;

    -- Se o tipo de conta não for encontrado, lançar uma exceção
    IF v_tipo_conta_id IS NULL THEN
        RAISE EXCEPTION 'Tipo de conta % não encontrado', p_tipo_conta;
    END IF;

    -- Inserir a nova conta na tabela 'contas' com o ID do tipo de conta
    INSERT INTO contas (fk_nr_id_usuario, fk_nr_id_saldo, fk_nr_id_tipo_conta, nm_nome, ds_saldo, ds_data_deposito)
    VALUES (p_id_usuario, p_id_saldo, v_tipo_conta_id, p_nome_conta, p_saldo, p_data_deposito)
    RETURNING nr_id_conta INTO v_id_conta;

    -- Retornar o ID da nova conta criada
    RETURN v_id_conta;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION buscar_todos_tipos_conta()
RETURNS TABLE(nr_id_tipo_conta INT, nm_tipo_conta VARCHAR) AS $$
BEGIN
    RETURN QUERY
    SELECT tc.nr_id_tipo_conta, tc.nm_tipo_conta
    FROM tipo_conta tc;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION inserir_saldo(
	fk_nr_id_usuario INTEGER,
	ds_saldo_atual DOUBLE PRECISION,
	data_atualizacao TIMESTAMP
)
RETURNS INTEGER AS $$
DECLARE
	new_id INTEGER;
BEGIN
    INSERT INTO saldo (fk_nr_id_usuario, ds_saldo_atual, data_atualizacao)
    VALUES (fk_nr_id_usuario, ds_saldo_atual, data_atualizacao)
	RETURNING nr_id_saldo INTO new_id;
	RETURN new_id;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION atualizar_saldo_usuario(p_id_usuario INTEGER)
RETURNS VOID AS $$
DECLARE
    novo_saldo DECIMAL;
BEGIN
    -- Soma os saldos de todas as contas do usuário
    SELECT COALESCE(SUM(ds_saldo), 0) INTO novo_saldo
    FROM contas
    WHERE fk_nr_id_usuario = p_id_usuario;

    -- Atualiza o saldo na tabela saldo
    UPDATE saldo
    SET ds_saldo_atual = novo_saldo,
        data_atualizacao = CURRENT_TIMESTAMP
    WHERE fk_nr_id_usuario = p_id_usuario;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION trigger_atualizar_saldo()
RETURNS TRIGGER AS $$
BEGIN
    -- Chama a função de atualização do saldo passando o id do usuário
    PERFORM atualizar_saldo_usuario(NEW.fk_nr_id_usuario);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_atualizar_saldo
AFTER INSERT ON contas
FOR EACH ROW
EXECUTE FUNCTION trigger_atualizar_saldo()

CREATE OR REPLACE FUNCTION obter_saldo_total(p_fk_nr_id_usuario INTEGER)
RETURNS DECIMAL AS $$
DECLARE
    saldo_total DECIMAL;
BEGIN
    -- Soma de todos os saldos atualizados para o usuário
    SELECT SUM(ds_saldo_atual) INTO saldo_total
    FROM saldo
    WHERE fk_nr_id_usuario = p_fk_nr_id_usuario;

    -- Se não houver registros de saldo, retorne 0
    IF saldo_total IS NULL THEN
        saldo_total := 0;
    END IF;

    RETURN saldo_total;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION verificar_email_existente(p_email VARCHAR)
RETURNS BOOLEAN AS $$
DECLARE
    email_existe BOOLEAN;
BEGIN
    SELECT EXISTS(SELECT 1 FROM usuarios WHERE ds_email = p_email) INTO email_existe;
    RETURN email_existe;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION recuperar_id_usuario_por_email(p_email VARCHAR)
RETURNS INT AS $$
DECLARE
    v_id_usuario INT;
BEGIN
    SELECT nr_id_usuario INTO v_id_usuario
    FROM usuarios
    WHERE ds_email = p_email;

    RETURN v_id_usuario;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION buscar_contas_por_usuario(p_id_usuario INTEGER)
RETURNS TABLE(
    nr_id_conta INTEGER,
    fk_nr_id_saldo INTEGER,
    nm_tipo_conta VARCHAR,   -- Nome do tipo de conta em vez do ID
    nm_nome VARCHAR,
    ds_saldo NUMERIC(10, 2),
    ds_data_deposito TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        c.nr_id_conta,
        c.fk_nr_id_saldo,
        tc.nm_tipo_conta,  -- Pega o nome do tipo de conta
        c.nm_nome,
        c.ds_saldo,
        c.ds_data_deposito
    FROM contas c
    INNER JOIN tipo_conta tc ON c.fk_nr_id_tipo_conta = tc.nr_id_tipo_conta  -- Join com a tabela tipo_conta
    WHERE c.fk_nr_id_usuario = p_id_usuario;
END;
$$ LANGUAGE plpgsql;

-- Função para inserir transação
CREATE OR REPLACE FUNCTION inserir_transacao(
    p_fk_nr_id_saldo INTEGER,
    p_fk_nr_id_conta INTEGER,
    p_ds_descricao VARCHAR,
    p_ds_categoria VARCHAR,
    p_ds_valor DOUBLE PRECISION,
    p_ds_data_movimentacao TIMESTAMP,
    p_tipo INTEGER
)
RETURNS INTEGER AS $$
DECLARE
    v_nr_id_transacao INTEGER;
BEGIN
    -- Verifica se o tipo é válido (1 para entrada, 2 para saída)
    IF p_tipo NOT IN (1, 2) THEN
        RAISE EXCEPTION 'Tipo de transação inválido. Use 1 para entrada e 2 para saída.';
    END IF;

    -- Insere a nova transação na tabela transacoes
    INSERT INTO transacoes (fk_nr_id_saldo, fk_nr_id_conta, ds_descricao, ds_categoria, ds_valor, ds_data_movimentacao, tipo)
    VALUES (p_fk_nr_id_saldo, p_fk_nr_id_conta, p_ds_descricao, p_ds_categoria, p_ds_valor, p_ds_data_movimentacao, p_tipo)
    RETURNING nr_id_transacao INTO v_nr_id_transacao;

    -- Retorna o ID da transação recém-criada
    RETURN v_nr_id_transacao;
END;
$$ LANGUAGE plpgsql;

-- Função para atualizar o saldo nas tabelas saldo e conta
CREATE OR REPLACE FUNCTION atualizar_saldo()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.tipo = 1 THEN
        -- Se a transação for uma entrada, somar o valor ao saldo atual
        UPDATE saldo
        SET ds_saldo_atual = ds_saldo_atual + NEW.ds_valor,
            data_atualizacao = CURRENT_TIMESTAMP
        WHERE nr_id_saldo = NEW.fk_nr_id_saldo;

        -- Atualiza o saldo da conta também
        UPDATE contas
        SET ds_saldo = ds_saldo + NEW.ds_valor
        WHERE nr_id_conta = NEW.fk_nr_id_conta;

    ELSIF NEW.tipo = 2 THEN
        -- Se a transação for uma saída, subtrair o valor do saldo atual
        UPDATE saldo
        SET ds_saldo_atual = ds_saldo_atual - NEW.ds_valor,
            data_atualizacao = CURRENT_TIMESTAMP
        WHERE nr_id_saldo = NEW.fk_nr_id_saldo;

        -- Atualiza o saldo da conta também
        UPDATE contas
        SET ds_saldo = ds_saldo - NEW.ds_valor
        WHERE nr_id_conta = NEW.fk_nr_id_conta;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para chamar a função após a inserção de uma transação
CREATE TRIGGER trigger_atualizar_saldo
AFTER INSERT ON transacoes
FOR EACH ROW
EXECUTE FUNCTION atualizar_saldo();

-- DROP FUNCTION public.obter_id_conta_por_nome(varchar);

CREATE OR REPLACE FUNCTION public.obter_id_conta_por_nome(p_nome_conta character varying)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
    id_conta INT;
BEGIN
    SELECT nr_id_conta INTO id_conta
    FROM contas
    WHERE nm_nome = p_nome_conta
    LIMIT 1;

    RETURN id_conta;
END;
$function$;

CREATE OR REPLACE FUNCTION buscar_extrato_por_usuario(p_id_usuario INTEGER, p_mes INTEGER, p_ano INTEGER)
RETURNS TABLE(
    nm_nome VARCHAR,
    ds_descricao VARCHAR,
    ds_categoria VARCHAR,
    ds_valor NUMERIC(10, 2),
    ds_data_movimentacao TIMESTAMP,
    tipo INTEGER,
    nm_tipo_conta VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT c.nm_nome, t.ds_descricao, t.ds_categoria, t.ds_valor, t.ds_data_movimentacao, t.tipo, tc.nm_tipo_conta
    FROM transacoes t
    JOIN contas c ON t.fk_nr_id_conta = c.nr_id_conta
    JOIN tipo_conta tc ON c.fk_nr_id_tipo_conta = tc.nr_id_tipo_conta
    WHERE c.fk_nr_id_usuario = p_id_usuario
    AND EXTRACT(MONTH FROM t.ds_data_movimentacao) = p_mes
    AND EXTRACT(YEAR FROM t.ds_data_movimentacao) = p_ano;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION excluir_conta(p_id_conta INTEGER)
RETURNS VOID AS $$
DECLARE
    v_id_saldo INTEGER;
    v_total_saldo DOUBLE PRECISION;
BEGIN
    -- Buscar o id do saldo associado à conta
    SELECT fk_nr_id_saldo INTO v_id_saldo
    FROM contas
    WHERE nr_id_conta = p_id_conta;

    -- Verificar se a conta existe
    IF v_id_saldo IS NOT NULL THEN

        -- Excluir todas as transações associadas à conta
        DELETE FROM transacoes WHERE fk_nr_id_conta = p_id_conta;

        -- Excluir a conta
        DELETE FROM contas WHERE nr_id_conta = p_id_conta;

        -- Recalcular o saldo total das contas restantes associadas ao saldo
        SELECT COALESCE(SUM(ds_saldo), 0) INTO v_total_saldo
        FROM contas
        WHERE fk_nr_id_saldo = v_id_saldo;

        -- Atualizar o saldo na tabela saldo
        UPDATE saldo
        SET ds_saldo_atual = v_total_saldo, data_atualizacao = CURRENT_TIMESTAMP
        WHERE nr_id_saldo = v_id_saldo;

    END IF;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION atualizar_conta(
    p_id_conta INTEGER,
    p_novo_nome VARCHAR,
    p_novo_tipo_conta VARCHAR
)
RETURNS VOID AS $$
BEGIN
    -- Verifica se a conta existe antes de atualizar
    IF EXISTS (SELECT 1 FROM contas WHERE nr_id_conta = p_id_conta) THEN
        -- Atualiza o nome e o tipo da conta
        UPDATE contas
        SET nm_nome = p_novo_nome,
            fk_nr_id_tipo_conta = (SELECT nr_id_tipo_conta FROM tipo_conta WHERE nm_tipo_conta = p_novo_tipo_conta)
        WHERE nr_id_conta = p_id_conta;
    ELSE
        -- Caso a conta não exista, lança uma exceção
        RAISE EXCEPTION 'Conta com id % não encontrada', p_id_conta;
    END IF;
END;
$$ LANGUAGE plpgsql;